<table><tr><td> <em>Assignment: </em> IT202 M2 PHP-HW</td></tr>
<tr><td> <em>Student: </em> Mohammad Hussain (mbh3)</td></tr>
<tr><td> <em>Generated: </em> 2/17/2024 11:37:10 PM</td></tr>
<tr><td> <em>Grading Link: </em> <a rel="noreferrer noopener" href="https://learn.ethereallab.app/homework/IT202-102-S2024/it202-m2-php-hw/grade/mbh3" target="_blank">Grading</a></td></tr></table>
<table><tr><td> <em>Instructions: </em> <p>Make sure you have the dev/prod branches created before starting this assignment.</p><p><strong>Template Files</strong>&nbsp;You can find all 3 template files in this gist:&nbsp;<a href="https://gist.github.com/MattToegel/48b48377eaa1937c886b7840c449750a">https://gist.github.com/MattToegel/48b48377eaa1937c886b7840c449750a</a><br></p><p>Setup steps:</p><ol><li><code>git checkout dev</code></li><li><code>git pull origin dev</code></li><li><code>git checkout -b M2-PHP-HW</code></li></ol><p>You'll have 3 problems to save for this assignment.</p><p>Each problem you're given a template&nbsp;<strong>Do not edit anything in the template except where the comments tell you to</strong>.</p><p>The templates are done in such a way to make it easier to capture the output in a screenshot (if it's still not able to fit well, you can zoom out in your browser).</p><p>You'll copy each template into their own separate .php files, immediately git add, git commit these files (you can do it together) so we can capture the difference/changes between the templates and your additions. This part is required for full credit.</p><p>HW steps:</p><ol><li>Open VS Code at the root of your repository folder (you should see the Procfile and all from the Heroku setup)</li><li>In VS Code create a new folder/directory in public_html called M2</li><li>Create 3 new files in this new M2 folder (problem1.php, problem2.php, problem3.php)</li><li>Paste each template into their respective files</li><li><code>git add .</code></li><li><code>git commit -m "adding template baselines</code></li><li>Do the related work (you may do steps 8 and 9 as often as needed or you can do it all at once at the end)</li><li><code>git add .</code></li><li><code>git commit -m "completed hw"</code></li><li>When you're done push the branch<ol><li><code>git push origin M2-PHP-HW</code></li></ol></li><li>Go to heroku dev, and manually deploy the M2-PHP-HW branch</li><li>After it deploys go to&nbsp;<a href="https://ucid-dev.herokuapp.com/M2/problem1.php">https://ucid-dev.herokuapp.com/M2/problem1.php</a>&nbsp;(replace ucid with your ucid if you followed the setup instructions)</li><li>Update the URL to check that each problem file displays properly</li><li>Create the Pull Request with&nbsp;<strong>dev</strong>&nbsp;as base and&nbsp;<strong>M2-PHP-HW</strong>&nbsp;as compare</li><li>Create a new file in the M2 folder in VS Code called m2_submission.md</li><li>Fill out the below deliverable items, save the submission, and copy to markdown<ol><li>For this assignment you may get screenshots from your heroku dev instance, you do not need to move it to prod then come back and update it</li></ol></li><li>Paste the markdown into the m2_submission.md</li><li>add/commit/push the md file<ol><li><code>git add m2_submission.md</code></li><li><code>git commit -m "adding submission file"</code></li><li><code>git push origin M2-PHP-HW</code></li></ol></li><li>Merge the pull request from step 14</li><li>Create a new pull request with prod as base and dev as compare</li><li>Immediately create/merge/confirm, this is just to deploy it to prod and you don't need to adjust anything during this step</li><li>On your local machine sync the changes<ol><li><code>git checkout dev</code></li><li><code>git pull origin dev</code></li></ol></li><li>Submit the link to the m2_submission.md file from the prod branch to Canvas</li></ol><p><br></p></td></tr></table>
<table><tr><td> <em>Deliverable 1: </em> Problem 1 - Only output Odd values of the Array under "Odds output" </td></tr><tr><td><em>Status: </em> <img width="100" height="20" src="https://user-images.githubusercontent.com/54863474/211707773-e6aef7cb-d5b2-4053-bbb1-b09fc609041e.png"></td></tr>
<tr><td><table><tr><td> <em>Sub-Task 1: </em> 2 Screenshots: Clearly screenshot the output of Problem 1 and show the edited code</td></tr>
<tr><td><table><tr><td><img width="768px" src="https://firebasestorage.googleapis.com/v0/b/learn-e1de9.appspot.com/o/assignments%2Fmbh3%2F2024-02-18T04.05.17image.png.webp?alt=media&token=977bde2c-243c-4504-b0ff-b318e9ac3ddf"/></td></tr>
<tr><td> <em>Caption:</em> <p>Screenshot of codes - forgot to use the ucid and already pushed it<br>to the github <br></p>
</td></tr>
<tr><td><img width="768px" src="https://firebasestorage.googleapis.com/v0/b/learn-e1de9.appspot.com/o/assignments%2Fmbh3%2F2024-02-18T04.07.22image.png.webp?alt=media&token=08359854-fe3a-4178-8648-03f67184bb38"/></td></tr>
<tr><td> <em>Caption:</em> <p>result <br></p>
</td></tr>
<tr><td><img width="768px" src="https://firebasestorage.googleapis.com/v0/b/learn-e1de9.appspot.com/o/assignments%2Fmbh3%2F2024-02-18T04.07.55image.png.webp?alt=media&token=445b124c-c235-4439-929c-c1969bcc2924"/></td></tr>
<tr><td> <em>Caption:</em> <p>rest of the results <br></p>
</td></tr>
</table></td></tr>
<tr><td> <em>Sub-Task 2: </em> Describe how you solved the problem</td></tr>
<tr><td> <em>Response:</em> <p>As the script iterates over each element within the arrays, it employs the<br>modulo operator % to determine if a number is odd. The modulo operator<br>finds the remainder of the division of one number by another. It checks<br>if the remainder of dividing the array element by 2 is equal to<br>1â€”a hallmark trait of odd numbers. When this condition is met, the number<br>is deemed odd and is then printed out. This method is not only<br>efficient but also elegantly simple, allowing for the seamless identification and extraction of<br>odd numbers from any sequence of integers. Through this process, the script adeptly<br>filters out the even numbers, presenting only the odd values in a clear<br>and organized manner.<br></p><br></td></tr>
</table></td></tr>
<table><tr><td> <em>Deliverable 2: </em> Problem 2 - Only output the sum/total of the array values by assigning it to the $total variable (the number must end in 2 decimal places, if it ends in 1 it must have a 0 at the end) </td></tr><tr><td><em>Status: </em> <img width="100" height="20" src="https://user-images.githubusercontent.com/54863474/211707773-e6aef7cb-d5b2-4053-bbb1-b09fc609041e.png"></td></tr>
<tr><td><table><tr><td> <em>Sub-Task 1: </em> 2 Screenshots: Clearly screenshot the output of Problem 2 showing the data and show the edited code</td></tr>
<tr><td><table><tr><td><img width="768px" src="https://firebasestorage.googleapis.com/v0/b/learn-e1de9.appspot.com/o/assignments%2Fmbh3%2F2024-02-18T04.12.48image.png.webp?alt=media&token=f4ee89eb-fe8a-44a0-9c1a-a7e8ecaec9c6"/></td></tr>
<tr><td> <em>Caption:</em> <p>codes <br></p>
</td></tr>
<tr><td><img width="768px" src="https://firebasestorage.googleapis.com/v0/b/learn-e1de9.appspot.com/o/assignments%2Fmbh3%2F2024-02-18T04.16.33image.png.webp?alt=media&token=28ff1ae2-2285-4712-b52b-459c35ad3e98"/></td></tr>
<tr><td> <em>Caption:</em> <p>results <br></p>
</td></tr>
</table></td></tr>
<tr><td> <em>Sub-Task 2: </em> Describe how you solved the problem</td></tr>
<tr><td> <em>Response:</em> <div>Totaling Logic: In problem2.php, the totaling logic is achieved by iterating through each<br>array with a foreach loop, systematically adding each element's value to a cumulative<br>total. This process ensures that every number, regardless of its position in the<br>array, contributes to the overall sum, allowing for an accurate calculation of the<br>total value contained within each array.</div><div>Rounding Logic: After computing the total, the script<br>applies PHP's round function to adjust the total to a specified precision. Specifically,<br>it rounds the total sum to two decimal places, ensuring the output is<br>in a standardized, readable format that is especially useful for financial and scientific<br>calculations where precision is key.</div><div>Other Edits: No additional edits were necessary for the<br>function to achieve its purpose beyond the totaling and rounding mechanisms.</div><br></td></tr>
</table></td></tr>
<table><tr><td> <em>Deliverable 3: </em> Problem 3 - Output the given values as positive under the "Positive Output" message (the data otherwise shouldn't change) </td></tr><tr><td><em>Status: </em> <img width="100" height="20" src="https://user-images.githubusercontent.com/54863474/211707773-e6aef7cb-d5b2-4053-bbb1-b09fc609041e.png"></td></tr>
<tr><td><table><tr><td> <em>Sub-Task 1: </em> 2 Screenshots: Clearly screenshot the output of Problem 3 showing the data and show the code</td></tr>
<tr><td><table><tr><td><img width="768px" src="https://firebasestorage.googleapis.com/v0/b/learn-e1de9.appspot.com/o/assignments%2Fmbh3%2F2024-02-18T04.21.41image.png.webp?alt=media&token=22b30102-8424-40de-b6fb-880a82a1537f"/></td></tr>
<tr><td> <em>Caption:</em> <p>codes <br></p>
</td></tr>
<tr><td><img width="768px" src="https://firebasestorage.googleapis.com/v0/b/learn-e1de9.appspot.com/o/assignments%2Fmbh3%2F2024-02-18T04.22.37image.png.webp?alt=media&token=3313860c-c078-4319-aed2-a1249ec65347"/></td></tr>
<tr><td> <em>Caption:</em> <p>results <br></p>
</td></tr>
<tr><td><img width="768px" src="https://firebasestorage.googleapis.com/v0/b/learn-e1de9.appspot.com/o/assignments%2Fmbh3%2F2024-02-18T04.23.15image.png.webp?alt=media&token=1a31d5e1-970f-4d00-976f-95573b239924"/></td></tr>
<tr><td> <em>Caption:</em> <p>resutls <br></p>
</td></tr>
</table></td></tr>
<tr><td> <em>Sub-Task 2: </em> Describe how you solved the problem</td></tr>
<tr><td> <em>Response:</em> <div>In problem3.php, the conversion of numbers to their positive counterparts was adeptly accomplished<br>through the use of the abs function within a foreach loop that iterated<br>over each array element. This approach guaranteed that every numeric value, whether originally<br>positive or negative, was transformed into its absolute value, effectively ensuring all output<br>values were positive. This method was both direct and universally applicable to numbers<br>of any sign, making it an efficient solution for achieving the desired positivity<br>in the array's elements.</div><div><br></div><div>Regarding data types and their conversion or casting, the script<br>took a nuanced approach to preserve the original data type of each element.<br>Numeric values detected within strings were specifically cast back to strings after their<br>conversion to positive numbers, ensuring the original data type integrity was maintained. This<br>was particularly important for elements that were initially string representations of numbers, as<br>it involved converting these strings to their absolute numeric values and then explicitly<br>casting them back to strings. This careful handling of data types ensured that<br>the output not only consisted of positive values but also respected the initial<br>data types of the array elements, whether they were integers, floats, or strings.</div><br></td></tr>
</table></td></tr>
<table><tr><td> <em>Deliverable 4: </em> Misc Items </td></tr><tr><td><em>Status: </em> <img width="100" height="20" src="https://user-images.githubusercontent.com/54863474/211707773-e6aef7cb-d5b2-4053-bbb1-b09fc609041e.png"></td></tr>
<tr><td><table><tr><td> <em>Sub-Task 1: </em> Add the prod URL for problem1.php (remember you can assume this based on how the domain gets built (i.e., ucid-prod.herokuapp.com/...)</td></tr>
<tr><td> <a rel="noreferrer noopener" target="_blank" href="//skip submission">skip submission</a> </td></tr>
<tr><td> <em>Sub-Task 2: </em> Add the prod URL for problem2.php (remember you can assume this based on how the domain gets built (i.e., ucid-prod.herokuapp.com/...)</td></tr>
<tr><td> <a rel="noreferrer noopener" target="_blank" href="//skip submission ">skip submission </a> </td></tr>
<tr><td> <em>Sub-Task 3: </em> Add the prod URL for problem3.php (remember you can assume this based on how the domain gets built (i.e., ucid-prod.herokuapp.com/...)</td></tr>
<tr><td> <a rel="noreferrer noopener" target="_blank" href="//skip submission">skip submission</a> </td></tr>
<tr><td> <em>Sub-Task 4: </em> Pull Request URL for M2-PHP-HW to dev</td></tr>
<tr><td> <a rel="noreferrer noopener" target="_blank" href="//skip submission">skip submission</a> </td></tr>
<tr><td> <em>Sub-Task 5: </em> Talk about what you learned, any issues you had, how you resolve them</td></tr>
<tr><td> <em>Response:</em> <p>Initially, I encountered some confusion with distinguishing between numeric values and their string<br>representations, especially when it came to maintaining the original data types after manipulation.<br>Delving into PHP&#39;s type juggling and explicit casting helped me overcome this hurdle,<br>teaching me the importance of precision in handling data types. Another challenge was<br>ensuring the output was correctly formatted for both command-line and web contexts, which<br>was a great reminder of the versatility required in programming to meet different<br>environment needs. Resolving these issues not only deepened my understanding of PHP but<br>also honed my ability to think critically and adapt solutions to meet the<br>specific requirements of each problem. This process reinforced the value of persistence and<br>the iterative nature of debugging, ultimately making me a more thoughtful and effective<br>problem-solver.<br></p><br></td></tr>
</table></td></tr>
<table><tr><td><em>Grading Link: </em><a rel="noreferrer noopener" href="https://learn.ethereallab.app/homework/IT202-102-S2024/it202-m2-php-hw/grade/mbh3" target="_blank">Grading</a></td></tr></table>